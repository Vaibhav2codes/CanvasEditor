{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vaibh\\\\OneDrive\\\\Desktop\\\\college\\\\web devlopment\\\\Zepto Prject\\\\my-ap\\\\src\\\\CanvasEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport { ChromePicker } from 'react-color';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasEditor = ({\n  templateData\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [caption, setCaption] = useState(templateData.caption.text);\n  const [callToAction, setCallToAction] = useState(templateData.cta.text);\n  const [backgroundColor, setBackgroundColor] = useState('#0369A1'); // Default background color\n  const [showColorPicker, setShowColorPicker] = useState(false);\n  const [pickedColors, setPickedColors] = useState(getRandomColors()); // Initial random colors\n  const MAX_PICKED_COLORS = 5;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw background color\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Load design pattern\n    const designPattern = new Image();\n    designPattern.src = templateData.urls.design_pattern;\n    designPattern.onload = () => {\n      ctx.drawImage(designPattern, 0, 0, canvas.width, canvas.height);\n\n      // Apply mask\n      const mask = new Image();\n      mask.src = addRandomQueryParam(templateData.urls.mask);\n      mask.onload = () => {\n        ctx.drawImage(mask, templateData.image_mask.x, templateData.image_mask.y, templateData.image_mask.width, templateData.image_mask.height);\n\n        // Apply mask stroke\n        // const maskStroke = new Image();\n        // maskStroke.src = (templateData.urls.stroke);\n        // maskStroke.onload = () => {\n        //   ctx.drawImage(maskStroke, templateData.image_mask.x+1, templateData.image_mask.y+1, templateData.image_mask.width, templateData.image_mask.height);\n        ctx.save(); // Save the current state of the context\n        ctx.strokeStyle = 'white'; // Set stroke color to white\n        ctx.lineWidth = 10; // Set stroke width (adjust as needed)\n        ctx.strokeRect(templateData.image_mask.x - 5, templateData.image_mask.y - 5, templateData.image_mask.width + 10, templateData.image_mask.height + 10); // Draw a stroke rectangle around the mask\n        ctx.restore();\n\n        // Draw caption\n        drawText(ctx, caption, templateData.caption);\n\n        // Draw call to action\n        drawCTA(ctx, callToAction, templateData.cta);\n      };\n    };\n    // };\n  }, [backgroundColor, caption, callToAction, templateData]);\n  const handleCaptionChange = event => {\n    setCaption(event.target.value);\n  };\n  const handleCallToActionChange = event => {\n    setCallToAction(event.target.value);\n  };\n  const handleBackgroundColorChange = color => {\n    setBackgroundColor(color.hex);\n  };\n  const handleColorPickerToggle = () => {\n    setShowColorPicker(!showColorPicker);\n  };\n  const handleColorChange = color => {\n    const newPickedColors = [...pickedColors];\n    if (newPickedColors.includes(color.hex)) {\n      // Move the selected color to the front of the array\n      const index = newPickedColors.indexOf(color.hex);\n      newPickedColors.splice(index, 1);\n      newPickedColors.unshift(color.hex);\n    } else {\n      if (newPickedColors.length >= MAX_PICKED_COLORS) {\n        newPickedColors.pop(); // Remove the oldest color if the list exceeds the maximum limit\n      }\n      newPickedColors.unshift(color.hex); // Add the new color to the beginning of the list\n    }\n    setPickedColors(newPickedColors);\n    setShowColorPicker(false); // Close the color picker popover\n    setBackgroundColor(color.hex); // Set the background color to the selected color\n  };\n  const addRandomQueryParam = url => {\n    const randomQueryParam = Math.floor(Math.random() * 100000); // Generate a random number\n    return `${url}?random=${randomQueryParam}`;\n  };\n\n  // Function to draw text with line breaks\n  const drawText = (ctx, text, data) => {\n    ctx.fillStyle = data.text_color;\n    ctx.font = `${data.font_size}px Arial`;\n    ctx.textAlign = data.alignment;\n    const lines = breakTextIntoLines(text, data.max_characters_per_line); // Break text into lines with max characters per line specified in data\n    let offsetY = data.position.y;\n    lines.forEach(line => {\n      ctx.fillText(line, data.position.x, offsetY);\n      offsetY += data.font_size + 5; // Adjust for line spacing\n    });\n  };\n  const drawCTA = (ctx, text, data) => {\n    // Function to wrap text to fit within a given width\n    const wrapText = (text, wrapLength) => {\n      const words = text.split(' ');\n      const lines = [];\n      let currentLine = '';\n      words.forEach(word => {\n        const testLine = currentLine + word + ' ';\n        const testWidth = ctx.measureText(testLine).width;\n        if (testWidth > wrapLength && currentLine !== '') {\n          lines.push(currentLine);\n          currentLine = word + ' ';\n        } else {\n          currentLine = testLine;\n        }\n      });\n      lines.push(currentLine);\n      return lines;\n    };\n    const ctaX = data.position.x;\n    const ctaY = data.position.y;\n    const ctaWidth = data.width || 200; // Default width for the CTA button\n    const ctaHeight = data.height || 80; // Default height for the CTA button\n    const cornerRadius = data.cornerRadius || 10; // Default corner radius for rounded corners\n    const textColor = data.text_color || 'white'; // Default text color\n    const bgColor = data.backgroundColor || 'black'; // Default background color\n    const padding = data.padding || 16; // Default padding around the text\n    const wrapLength = data.wrapLength || 20; // Default wrap length for text\n\n    // Draw rounded rectangle background for CTA button\n    ctx.beginPath();\n    ctx.moveTo(ctaX + cornerRadius, ctaY);\n    ctx.arcTo(ctaX + ctaWidth, ctaY, ctaX + ctaWidth, ctaY + ctaHeight, cornerRadius);\n    ctx.arcTo(ctaX + ctaWidth, ctaY + ctaHeight, ctaX, ctaY + ctaHeight, cornerRadius);\n    ctx.arcTo(ctaX, ctaY + ctaHeight, ctaX, ctaY, cornerRadius);\n    ctx.arcTo(ctaX, ctaY, ctaX + ctaWidth, ctaY, cornerRadius);\n    ctx.closePath();\n    ctx.fillStyle = bgColor;\n    ctx.fill();\n\n    // Draw text on the CTA button\n    ctx.fillStyle = textColor;\n    ctx.font = `${data.font_size || 30}px Arial`; // Default font size for the text\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    // Wrap text if it exceeds wrapLength\n    const wrappedText = wrapText(text, wrapLength);\n    const lineHeight = ctx.measureText('M').width; // Approximate line height\n\n    // Calculate vertical position to vertically center the text\n    const textY = ctaY + ctaHeight / 2 - lineHeight * wrappedText.length / 2;\n\n    // Draw wrapped text with padding\n    wrappedText.forEach((line, index) => {\n      ctx.fillText(line, ctaX + ctaWidth / 2, textY + index * lineHeight + padding / 2);\n    });\n  };\n  const breakTextIntoLines = (text, maxCharactersPerLine) => {\n    const lines = [];\n    let currentLine = '';\n    for (let i = 0; i < text.length; i++) {\n      currentLine += text[i];\n      if (currentLine.length === maxCharactersPerLine || i === text.length - 1) {\n        lines.push(currentLine);\n        currentLine = '';\n      }\n    }\n    return lines;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 1080,\n      height: 1080,\n      className: \"border border-gray-400\",\n      style: {\n        width: '400px',\n        height: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 flex flex-col items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: caption,\n        onChange: handleCaptionChange,\n        placeholder: \"Enter Caption\",\n        className: \"border border-gray-400 p-2 mb-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: callToAction,\n        onChange: handleCallToActionChange,\n        placeholder: \"Enter CTA Text\",\n        className: \"border border-gray-400 p-2 mb-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-picker\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-list\",\n          children: [pickedColors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-box\",\n            style: {\n              backgroundColor: color\n            },\n            onClick: () => setBackgroundColor(color)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"color-picker-btn\",\n            onClick: handleColorPickerToggle,\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), showColorPicker && /*#__PURE__*/_jsxDEV(ChromePicker, {\n          color: backgroundColor,\n          onChange: handleBackgroundColorChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(CanvasEditor, \"IAKSPZRxcUBprMAq1TCRT+2vuQw=\");\n_c = CanvasEditor;\nexport default CanvasEditor;\nvar _c;\n$RefreshReg$(_c, \"CanvasEditor\");","map":{"version":3,"names":["React","useRef","useState","useEffect","ChromePicker","jsxDEV","_jsxDEV","CanvasEditor","templateData","_s","canvasRef","caption","setCaption","text","callToAction","setCallToAction","cta","backgroundColor","setBackgroundColor","showColorPicker","setShowColorPicker","pickedColors","setPickedColors","getRandomColors","MAX_PICKED_COLORS","canvas","current","ctx","getContext","clearRect","width","height","fillStyle","fillRect","designPattern","Image","src","urls","design_pattern","onload","drawImage","mask","addRandomQueryParam","image_mask","x","y","save","strokeStyle","lineWidth","strokeRect","restore","drawText","drawCTA","handleCaptionChange","event","target","value","handleCallToActionChange","handleBackgroundColorChange","color","hex","handleColorPickerToggle","handleColorChange","newPickedColors","includes","index","indexOf","splice","unshift","length","pop","url","randomQueryParam","Math","floor","random","data","text_color","font","font_size","textAlign","alignment","lines","breakTextIntoLines","max_characters_per_line","offsetY","position","forEach","line","fillText","wrapText","wrapLength","words","split","currentLine","word","testLine","testWidth","measureText","push","ctaX","ctaY","ctaWidth","ctaHeight","cornerRadius","textColor","bgColor","padding","beginPath","moveTo","arcTo","closePath","fill","textBaseline","wrappedText","lineHeight","textY","maxCharactersPerLine","i","className","children","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","map","onClick","_c","$RefreshReg$"],"sources":["C:/Users/vaibh/OneDrive/Desktop/college/web devlopment/Zepto Prject/my-ap/src/CanvasEditor.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { ChromePicker } from 'react-color';\r\nimport './styles.css'\r\n\r\nconst CanvasEditor = ({ templateData }) => {\r\n  const canvasRef = useRef(null);\r\n  const [caption, setCaption] = useState(templateData.caption.text);\r\n  const [callToAction, setCallToAction] = useState(templateData.cta.text);\r\n  const [backgroundColor, setBackgroundColor] = useState('#0369A1'); // Default background color\r\n  const [showColorPicker, setShowColorPicker] = useState(false);\r\n  const [pickedColors, setPickedColors] = useState(getRandomColors()); // Initial random colors\r\n  const MAX_PICKED_COLORS = 5;\r\n\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Draw background color\r\n    ctx.fillStyle = backgroundColor;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Load design pattern\r\n    const designPattern = new Image();\r\n    designPattern.src = (templateData.urls.design_pattern);\r\n    designPattern.onload = () => {\r\n      ctx.drawImage(designPattern, 0, 0, canvas.width, canvas.height);\r\n\r\n      // Apply mask\r\n      const mask = new Image();\r\n      mask.src = addRandomQueryParam(templateData.urls.mask);\r\n      mask.onload = () => {\r\n        ctx.drawImage(mask, templateData.image_mask.x, templateData.image_mask.y, templateData.image_mask.width, templateData.image_mask.height);\r\n\r\n        // Apply mask stroke\r\n        // const maskStroke = new Image();\r\n        // maskStroke.src = (templateData.urls.stroke);\r\n        // maskStroke.onload = () => {\r\n        //   ctx.drawImage(maskStroke, templateData.image_mask.x+1, templateData.image_mask.y+1, templateData.image_mask.width, templateData.image_mask.height);\r\n        ctx.save(); // Save the current state of the context\r\n        ctx.strokeStyle = 'white'; // Set stroke color to white\r\n        ctx.lineWidth = 10; // Set stroke width (adjust as needed)\r\n        ctx.strokeRect(templateData.image_mask.x - 5, templateData.image_mask.y - 5, templateData.image_mask.width + 10, templateData.image_mask.height + 10); // Draw a stroke rectangle around the mask\r\n        ctx.restore();\r\n\r\n          // Draw caption\r\n          drawText(ctx, caption, templateData.caption);\r\n\r\n          // Draw call to action\r\n          drawCTA(ctx, callToAction, templateData.cta);\r\n        };\r\n      };\r\n    // };\r\n  }, [backgroundColor,caption,callToAction,templateData]);\r\n\r\n  const handleCaptionChange = (event) => {\r\n    setCaption(event.target.value);\r\n  };\r\n\r\n  const handleCallToActionChange = (event) => {\r\n    setCallToAction(event.target.value);\r\n  };\r\n\r\n  const handleBackgroundColorChange = (color) => {\r\n    setBackgroundColor(color.hex);\r\n  };\r\n\r\n  const handleColorPickerToggle = () => {\r\n    setShowColorPicker(!showColorPicker);\r\n  };\r\n\r\n  const handleColorChange = (color) => {\r\n    const newPickedColors = [...pickedColors];\r\n    if (newPickedColors.includes(color.hex)) {\r\n      // Move the selected color to the front of the array\r\n      const index = newPickedColors.indexOf(color.hex);\r\n      newPickedColors.splice(index, 1);\r\n      newPickedColors.unshift(color.hex);\r\n    } else {\r\n      if (newPickedColors.length >= MAX_PICKED_COLORS) {\r\n        newPickedColors.pop(); // Remove the oldest color if the list exceeds the maximum limit\r\n      }\r\n      newPickedColors.unshift(color.hex); // Add the new color to the beginning of the list\r\n    }\r\n    setPickedColors(newPickedColors);\r\n    setShowColorPicker(false); // Close the color picker popover\r\n    setBackgroundColor(color.hex); // Set the background color to the selected color\r\n  };\r\n\r\n  const addRandomQueryParam = (url) => {\r\n    const randomQueryParam = Math.floor(Math.random() * 100000); // Generate a random number\r\n    return `${url}?random=${randomQueryParam}`;\r\n  };\r\n\r\n  // Function to draw text with line breaks\r\nconst drawText = (ctx, text, data) => {\r\n  ctx.fillStyle = data.text_color;\r\n  ctx.font = `${data.font_size}px Arial`;\r\n  ctx.textAlign = data.alignment;\r\n\r\n  const lines = breakTextIntoLines(text, data.max_characters_per_line); // Break text into lines with max characters per line specified in data\r\n  let offsetY = data.position.y;\r\n  lines.forEach((line) => {\r\n    ctx.fillText(line, data.position.x, offsetY);\r\n    offsetY += data.font_size + 5; // Adjust for line spacing\r\n  });\r\n};\r\n\r\nconst drawCTA = (ctx, text, data) => {\r\n  // Function to wrap text to fit within a given width\r\n  const wrapText = (text, wrapLength) => {\r\n    const words = text.split(' ');\r\n    const lines = [];\r\n    let currentLine = '';\r\n\r\n    words.forEach(word => {\r\n      const testLine = currentLine + word + ' ';\r\n      const testWidth = ctx.measureText(testLine).width;\r\n      if (testWidth > wrapLength && currentLine !== '') {\r\n        lines.push(currentLine);\r\n        currentLine = word + ' ';\r\n      } else {\r\n        currentLine = testLine;\r\n      }\r\n    });\r\n\r\n    lines.push(currentLine);\r\n    return lines;\r\n  };\r\n\r\n  const ctaX = data.position.x;\r\n  const ctaY = data.position.y;\r\n  const ctaWidth = data.width || 200; // Default width for the CTA button\r\n  const ctaHeight = data.height || 80; // Default height for the CTA button\r\n  const cornerRadius = data.cornerRadius || 10; // Default corner radius for rounded corners\r\n  const textColor = data.text_color || 'white'; // Default text color\r\n  const bgColor = data.backgroundColor || 'black'; // Default background color\r\n  const padding = data.padding || 16; // Default padding around the text\r\n  const wrapLength = data.wrapLength || 20; // Default wrap length for text\r\n\r\n  // Draw rounded rectangle background for CTA button\r\n  ctx.beginPath();\r\n  ctx.moveTo(ctaX + cornerRadius, ctaY);\r\n  ctx.arcTo(ctaX + ctaWidth, ctaY, ctaX + ctaWidth, ctaY + ctaHeight, cornerRadius);\r\n  ctx.arcTo(ctaX + ctaWidth, ctaY + ctaHeight, ctaX, ctaY + ctaHeight, cornerRadius);\r\n  ctx.arcTo(ctaX, ctaY + ctaHeight, ctaX, ctaY, cornerRadius);\r\n  ctx.arcTo(ctaX, ctaY, ctaX + ctaWidth, ctaY, cornerRadius);\r\n  ctx.closePath();\r\n\r\n  ctx.fillStyle = bgColor;\r\n  ctx.fill();\r\n\r\n  // Draw text on the CTA button\r\n  ctx.fillStyle = textColor;\r\n  ctx.font = `${data.font_size || 30}px Arial`; // Default font size for the text\r\n  ctx.textAlign = 'center';\r\n  ctx.textBaseline = 'middle';\r\n\r\n  // Wrap text if it exceeds wrapLength\r\n  const wrappedText = wrapText(text, wrapLength);\r\n  const lineHeight = ctx.measureText('M').width; // Approximate line height\r\n\r\n  // Calculate vertical position to vertically center the text\r\n  const textY = ctaY + ctaHeight / 2 - (lineHeight * wrappedText.length) / 2;\r\n\r\n  // Draw wrapped text with padding\r\n  wrappedText.forEach((line, index) => {\r\n    ctx.fillText(line, ctaX + ctaWidth / 2, textY + index * lineHeight + padding / 2);\r\n  });\r\n};\r\n\r\n\r\n  const breakTextIntoLines = (text, maxCharactersPerLine) => {\r\n    const lines = [];\r\n    let currentLine = '';\r\n  \r\n    for (let i = 0; i < text.length; i++) {\r\n      currentLine += text[i];\r\n      if (currentLine.length === maxCharactersPerLine || i === text.length - 1) {\r\n        lines.push(currentLine);\r\n        currentLine = '';\r\n      }\r\n    }\r\n    return lines;\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center\">\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={1080}\r\n        height={1080}\r\n        className=\"border border-gray-400\"\r\n        style={{ width: '400px', height: '400px' }}\r\n      />\r\n      <div className=\"mt-4 flex flex-col items-center\">\r\n        <input\r\n          type=\"text\"\r\n          value={caption}\r\n          onChange={handleCaptionChange}\r\n          placeholder=\"Enter Caption\"\r\n          className=\"border border-gray-400 p-2 mb-2\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          value={callToAction}\r\n          onChange={handleCallToActionChange}\r\n          placeholder=\"Enter CTA Text\"\r\n          className=\"border border-gray-400 p-2 mb-2\"\r\n        />\r\n        <div className=\"color-picker\">\r\n          <div className=\"color-list\">\r\n            {pickedColors.map((color, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"color-box\"\r\n                style={{ backgroundColor: color }}\r\n                onClick={() => setBackgroundColor(color)}\r\n              />\r\n            ))}\r\n            <button className=\"color-picker-btn\" onClick={handleColorPickerToggle}>\r\n              +\r\n            </button>\r\n          </div>\r\n          {showColorPicker && (\r\n            <ChromePicker color={backgroundColor} onChange={handleBackgroundColorChange} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CanvasEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}