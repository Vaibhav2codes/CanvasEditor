{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vaibh\\\\OneDrive\\\\Desktop\\\\college\\\\web devlopment\\\\Zepto Prject\\\\my-ap\\\\src\\\\CanvasEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport { ChromePicker } from 'react-color';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasEditor = ({\n  templateData\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [caption, setCaption] = useState(templateData.caption.text);\n  const [callToAction, setCallToAction] = useState(templateData.cta.text);\n  const [backgroundColor, setBackgroundColor] = useState('#0369A1'); // Default background color\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Calculate the scale factor for the canvas\n    const scaleFactor = 400 / 1080;\n\n    // Apply the scale to the canvas\n    ctx.scale(scaleFactor, scaleFactor);\n\n    // Draw background color\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Load design pattern\n    const designPattern = new Image();\n    designPattern.crossOrigin = 'anonymous'; // Add crossOrigin attribute to avoid CORS issues\n    designPattern.onload = () => {\n      // Apply design pattern\n      ctx.drawImage(designPattern, 0, 0, canvas.width, canvas.height);\n\n      // Apply mask\n      const userImage = new Image();\n      userImage.crossOrigin = 'anonymous'; // Add crossOrigin attribute to avoid CORS issues\n      userImage.src = templateData.urls.coffeeimg;\n      userImage.onload = () => {\n        // Create a temporary canvas to draw the mask\n        const tempCanvas = document.createElement('canvas');\n        tempCanvas.width = canvas.width;\n        tempCanvas.height = canvas.height;\n        const tempCtx = tempCanvas.getContext('2d');\n\n        // Load mask\n        const mask = new Image();\n        mask.crossOrigin = 'anonymous'; // Add crossOrigin attribute to avoid CORS issues\n        mask.src = templateData.urls.mask;\n        mask.onload = () => {\n          // Draw mask on temporary canvas\n          tempCtx.drawImage(mask, 0, 0, canvas.width, canvas.height);\n\n          // Set global composite operation to 'source-in' to apply masking\n          ctx.globalCompositeOperation = 'source-in';\n\n          // Draw user image within the mask\n          ctx.drawImage(userImage, templateData.image_mask.x, templateData.image_mask.y, templateData.image_mask.width, templateData.image_mask.height);\n\n          // Reset global composite operation\n          ctx.globalCompositeOperation = 'source-over';\n\n          // Load mask stroke\n          const maskStroke = new Image();\n          maskStroke.crossOrigin = 'anonymous'; // Add crossOrigin attribute to avoid CORS issues\n          maskStroke.src = templateData.urls.stroke;\n          maskStroke.onload = () => {\n            // Draw mask stroke on top of the mask\n            ctx.drawImage(maskStroke, templateData.image_mask.x, templateData.image_mask.y, templateData.image_mask.width, templateData.image_mask.height);\n\n            // Draw caption\n            drawCaption(ctx, caption, templateData.caption);\n\n            // Draw call to action\n            drawCallToAction(ctx, callToAction, templateData.cta);\n          };\n        };\n      };\n    };\n    designPattern.src = addRandomQueryParam(templateData.urls.design_pattern);\n  }, [caption, callToAction, backgroundColor, templateData]);\n  const handleCaptionChange = event => {\n    setCaption(event.target.value);\n  };\n  const handleCallToActionChange = event => {\n    setCallToAction(event.target.value);\n  };\n  const handleBackgroundColorChange = color => {\n    setBackgroundColor(color.hex);\n  };\n  const addRandomQueryParam = url => {\n    const randomQueryParam = Math.floor(Math.random() * 100000); // Generate a random number\n    return `${url}?random=${randomQueryParam}`;\n  };\n  const drawCaption = (ctx, text, captionData) => {\n    ctx.fillStyle = captionData.text_color;\n    ctx.font = `${captionData.font_size}px Arial`;\n    ctx.textAlign = captionData.alignment;\n    const lines = breakTextIntoLines(ctx, text, captionData.max_characters_per_line);\n    let offsetY = captionData.position.y;\n    lines.forEach(line => {\n      ctx.fillText(line, captionData.position.x, offsetY);\n      offsetY += captionData.font_size + 5; // Adjust for line spacing\n    });\n  };\n  const drawCallToAction = (ctx, text, ctaData) => {\n    ctx.fillStyle = ctaData.text_color;\n    ctx.fillRect(ctaData.position.x, ctaData.position.y, ctx.measureText(text).width + 48, ctaData.font_size + 24);\n    ctx.fillStyle = ctaData.background_color;\n    const cornerRadius = 10; // Rounded corner radius\n    ctx.lineJoin = 'round';\n    ctx.lineWidth = cornerRadius;\n    ctx.strokeStyle = ctaData.background_color;\n    ctx.strokeRect(ctaData.position.x + cornerRadius / 2, ctaData.position.y + cornerRadius / 2, ctx.measureText(text).width + 47, ctaData.font_size + 23);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.font = `${ctaData.font_size || 30}px Arial`;\n    ctx.fillStyle = ctaData.text_color;\n    ctx.fillText(text, ctaData.position.x + (ctx.measureText(text).width + 48) / 2, ctaData.position.y + (ctaData.font_size + 24) / 2);\n  };\n  const breakTextIntoLines = (ctx, text, maxWidth) => {\n    const words = text.split(' ');\n    const lines = [];\n    let currentLine = '';\n    words.forEach(word => {\n      const width = ctx.measureText(`${currentLine} ${word}`).width;\n      if (width < maxWidth || currentLine === '') {\n        currentLine += (currentLine === '' ? '' : ' ') + word;\n      } else {\n        lines.push(currentLine);\n        currentLine = word;\n      }\n    });\n    lines.push(currentLine); // Push the last line\n    return lines;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-container\",\n    style: {\n      width: '400px',\n      height: '400px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 1080,\n      height: 1080,\n      className: \"border border-gray-400\",\n      style: {\n        width: '400px',\n        height: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: caption,\n        onChange: handleCaptionChange,\n        className: \"border border-gray-400 p-2 mr-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: callToAction,\n        onChange: handleCallToActionChange,\n        className: \"border border-gray-400 p-2 mr-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-picker\",\n        children: /*#__PURE__*/_jsxDEV(ChromePicker, {\n          color: backgroundColor,\n          onChangeComplete: handleBackgroundColorChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(CanvasEditor, \"F6zCx3h0CAGSwfupFffpNVan+z0=\");\n_c = CanvasEditor;\nexport default CanvasEditor;\nvar _c;\n$RefreshReg$(_c, \"CanvasEditor\");","map":{"version":3,"names":["React","useRef","useState","useEffect","ChromePicker","jsxDEV","_jsxDEV","CanvasEditor","templateData","_s","canvasRef","caption","setCaption","text","callToAction","setCallToAction","cta","backgroundColor","setBackgroundColor","canvas","current","ctx","getContext","scaleFactor","scale","fillStyle","fillRect","width","height","designPattern","Image","crossOrigin","onload","drawImage","userImage","src","urls","coffeeimg","tempCanvas","document","createElement","tempCtx","mask","globalCompositeOperation","image_mask","x","y","maskStroke","stroke","drawCaption","drawCallToAction","addRandomQueryParam","design_pattern","handleCaptionChange","event","target","value","handleCallToActionChange","handleBackgroundColorChange","color","hex","url","randomQueryParam","Math","floor","random","captionData","text_color","font","font_size","textAlign","alignment","lines","breakTextIntoLines","max_characters_per_line","offsetY","position","forEach","line","fillText","ctaData","measureText","background_color","cornerRadius","lineJoin","lineWidth","strokeStyle","strokeRect","textBaseline","maxWidth","words","split","currentLine","word","push","className","style","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onChangeComplete","_c","$RefreshReg$"],"sources":["C:/Users/vaibh/OneDrive/Desktop/college/web devlopment/Zepto Prject/my-ap/src/CanvasEditor.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { ChromePicker } from 'react-color';\r\nimport './styles.css';\r\n\r\nconst CanvasEditor = ({ templateData }) => {\r\n  const canvasRef = useRef(null);\r\n  const [caption, setCaption] = useState(templateData.caption.text);\r\n  const [callToAction, setCallToAction] = useState(templateData.cta.text);\r\n  const [backgroundColor, setBackgroundColor] = useState('#0369A1'); // Default background color\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    // Calculate the scale factor for the canvas\r\n    const scaleFactor = 400 / 1080;\r\n\r\n    // Apply the scale to the canvas\r\n    ctx.scale(scaleFactor, scaleFactor);\r\n\r\n    // Draw background color\r\n    ctx.fillStyle = backgroundColor;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Load design pattern\r\n    const designPattern = new Image();\r\n    designPattern.crossOrigin = 'anonymous'; // Add crossOrigin attribute to avoid CORS issues\r\n    designPattern.onload = () => {\r\n      // Apply design pattern\r\n      ctx.drawImage(designPattern, 0, 0, canvas.width, canvas.height);\r\n\r\n      // Apply mask\r\n      const userImage = new Image();\r\n      userImage.crossOrigin = 'anonymous'; // Add crossOrigin attribute to avoid CORS issues\r\n      userImage.src = templateData.urls.coffeeimg;\r\n      userImage.onload = () => {\r\n        // Create a temporary canvas to draw the mask\r\n        const tempCanvas = document.createElement('canvas');\r\n        tempCanvas.width = canvas.width;\r\n        tempCanvas.height = canvas.height;\r\n        const tempCtx = tempCanvas.getContext('2d');\r\n\r\n        // Load mask\r\n        const mask = new Image();\r\n        mask.crossOrigin = 'anonymous'; // Add crossOrigin attribute to avoid CORS issues\r\n        mask.src = templateData.urls.mask;\r\n        mask.onload = () => {\r\n          // Draw mask on temporary canvas\r\n          tempCtx.drawImage(mask, 0, 0, canvas.width, canvas.height);\r\n\r\n          // Set global composite operation to 'source-in' to apply masking\r\n          ctx.globalCompositeOperation = 'source-in';\r\n\r\n          // Draw user image within the mask\r\n          ctx.drawImage(userImage, templateData.image_mask.x, templateData.image_mask.y, templateData.image_mask.width, templateData.image_mask.height);\r\n\r\n          // Reset global composite operation\r\n          ctx.globalCompositeOperation = 'source-over';\r\n\r\n          // Load mask stroke\r\n          const maskStroke = new Image();\r\n          maskStroke.crossOrigin = 'anonymous'; // Add crossOrigin attribute to avoid CORS issues\r\n          maskStroke.src = templateData.urls.stroke;\r\n          maskStroke.onload = () => {\r\n            // Draw mask stroke on top of the mask\r\n            ctx.drawImage(maskStroke, templateData.image_mask.x, templateData.image_mask.y, templateData.image_mask.width, templateData.image_mask.height);\r\n\r\n            // Draw caption\r\n            drawCaption(ctx, caption, templateData.caption);\r\n\r\n            // Draw call to action\r\n            drawCallToAction(ctx, callToAction, templateData.cta);\r\n          };\r\n        };\r\n      };\r\n    };\r\n\r\n    designPattern.src = addRandomQueryParam(templateData.urls.design_pattern);\r\n  }, [caption, callToAction, backgroundColor, templateData]);\r\n\r\n  const handleCaptionChange = (event) => {\r\n    setCaption(event.target.value);\r\n  };\r\n\r\n  const handleCallToActionChange = (event) => {\r\n    setCallToAction(event.target.value);\r\n  };\r\n\r\n  const handleBackgroundColorChange = (color) => {\r\n    setBackgroundColor(color.hex);\r\n  };\r\n\r\n  const addRandomQueryParam = (url) => {\r\n    const randomQueryParam = Math.floor(Math.random() * 100000); // Generate a random number\r\n    return `${url}?random=${randomQueryParam}`;\r\n  };\r\n\r\n  const drawCaption = (ctx, text, captionData) => {\r\n    ctx.fillStyle = captionData.text_color;\r\n    ctx.font = `${captionData.font_size}px Arial`;\r\n    ctx.textAlign = captionData.alignment;\r\n    \r\n    const lines = breakTextIntoLines(ctx, text, captionData.max_characters_per_line);\r\n    let offsetY = captionData.position.y;\r\n    lines.forEach((line) => {\r\n      ctx.fillText(line, captionData.position.x, offsetY);\r\n      offsetY += captionData.font_size + 5; // Adjust for line spacing\r\n    });\r\n  };\r\n\r\n  const drawCallToAction = (ctx, text, ctaData) => {\r\n    ctx.fillStyle = ctaData.text_color;\r\n    ctx.fillRect(ctaData.position.x, ctaData.position.y, ctx.measureText(text).width + 48, ctaData.font_size + 24);\r\n    ctx.fillStyle = ctaData.background_color;\r\n    const cornerRadius = 10; // Rounded corner radius\r\n    ctx.lineJoin = 'round';\r\n    ctx.lineWidth = cornerRadius;\r\n    ctx.strokeStyle = ctaData.background_color;\r\n    ctx.strokeRect(ctaData.position.x + cornerRadius / 2, ctaData.position.y + cornerRadius / 2, ctx.measureText(text).width + 47, ctaData.font_size + 23);\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.font = `${ctaData.font_size || 30}px Arial`;\r\n    ctx.fillStyle = ctaData.text_color;\r\n    ctx.fillText(text, ctaData.position.x + (ctx.measureText(text).width + 48) / 2, ctaData.position.y + (ctaData.font_size + 24) / 2);\r\n  };\r\n\r\n  const breakTextIntoLines = (ctx, text, maxWidth) => {\r\n    const words = text.split(' ');\r\n    const lines = [];\r\n    let currentLine = '';\r\n\r\n    words.forEach((word) => {\r\n      const width = ctx.measureText(`${currentLine} ${word}`).width;\r\n      if (width < maxWidth || currentLine === '') {\r\n        currentLine += (currentLine === '' ? '' : ' ') + word;\r\n      } else {\r\n        lines.push(currentLine);\r\n        currentLine = word;\r\n      }\r\n    });\r\n    lines.push(currentLine); // Push the last line\r\n    return lines;\r\n  };\r\n\r\n  return (\r\n    <div className=\"canvas-container\" style={{ width: '400px', height: '400px' }}>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={1080}\r\n        height={1080}\r\n        className=\"border border-gray-400\"\r\n        style={{ width: '400px', height: '400px' }}\r\n      />\r\n      <div className=\"mt-4\">\r\n        <input\r\n          type=\"text\"\r\n          value={caption}\r\n          onChange={handleCaptionChange}\r\n          className=\"border border-gray-400 p-2 mr-2\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          value={callToAction}\r\n          onChange={handleCallToActionChange}\r\n          className=\"border border-gray-400 p-2 mr-2\"\r\n        />\r\n        <div className=\"color-picker\">\r\n          <ChromePicker color={backgroundColor} onChangeComplete={handleBackgroundColorChange} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CanvasEditor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}