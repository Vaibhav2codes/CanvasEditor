{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vaibh\\\\OneDrive\\\\Desktop\\\\college\\\\web devlopment\\\\Zepto Prject\\\\my-ap\\\\src\\\\CanvasEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport { ChromePicker } from 'react-color';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasEditor = ({\n  templateData\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [caption, setCaption] = useState(templateData.caption.text);\n  const [callToAction, setCallToAction] = useState(templateData.cta.text);\n  const [backgroundColor, setBackgroundColor] = useState('#0369A1'); // Default background color\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Calculate the scale factor for the canvas\n    const scaleFactor = 400 / 1080;\n\n    // Apply the scale to the canvas\n    ctx.scale(scaleFactor, scaleFactor);\n\n    // Draw background color\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Load design pattern\n    const designPattern = new Image();\n    designPattern.onload = () => {\n      ctx.drawImage(designPattern, 0, 0, canvas.width, canvas.height);\n\n      // Apply mask\n      const userImage = new Image();\n      userImage.src = templateData.urls.coffeeimg;\n      userImage.onload = () => {\n        // Resize user image to fit the mask size\n        ctx.drawImage(userImage, templateData.image_mask.x, templateData.image_mask.y, templateData.image_mask.width, templateData.image_mask.height);\n\n        // Load mask stroke\n        const maskStroke = new Image();\n        maskStroke.src = addRandomQueryParam(templateData.urls.stroke);\n        maskStroke.onload = () => {\n          // Draw the mask stroke on top of the mask\n          ctx.drawImage(maskStroke, templateData.image_mask.x, templateData.image_mask.y, templateData.image_mask.width, templateData.image_mask.height);\n\n          // Draw caption\n          ctx.fillStyle = templateData.caption.text_color;\n          ctx.font = `${templateData.caption.font_size}px Arial`;\n          ctx.textAlign = templateData.caption.alignment;\n          const lines = getLines(ctx, caption, templateData.caption.max_characters_per_line);\n          lines.forEach((line, index) => {\n            ctx.fillText(line, templateData.caption.position.x, templateData.caption.position.y + index * (templateData.caption.font_size + 5));\n          });\n\n          // Draw call to action\n          const ctaFontSize = templateData.cta.font_size || 30; // Default font size if not provided\n          ctx.fillStyle = templateData.cta.text_color;\n          ctx.fillRect(templateData.cta.position.x, templateData.cta.position.y, 100, 40);\n          ctx.fillStyle = templateData.cta.background_color;\n          ctx.textAlign = 'center';\n          ctx.textBaseline = 'middle';\n          ctx.font = `${ctaFontSize}px Arial`;\n          const ctaX = templateData.cta.position.x + 50; // Center of the rectangle\n          const ctaY = templateData.cta.position.y + 20; // Middle of the rectangle\n          ctx.fillText(callToAction, ctaX, ctaY);\n        };\n      };\n    };\n    designPattern.src = addRandomQueryParam(templateData.urls.design_pattern);\n  }, [caption, callToAction, backgroundColor, templateData]);\n  const handleCaptionChange = event => {\n    setCaption(event.target.value);\n  };\n  const handleCallToActionChange = event => {\n    setCallToAction(event.target.value);\n  };\n  const handleBackgroundColorChange = color => {\n    setBackgroundColor(color.hex);\n  };\n  const addRandomQueryParam = url => {\n    const randomQueryParam = Math.floor(Math.random() * 100000); // Generate a random number\n    return `${url}?random=${randomQueryParam}`;\n  };\n  const getLines = (ctx, text, maxWidth) => {\n    const words = text.split(' ');\n    const lines = [];\n    let currentLine = words[0];\n    for (let i = 1; i < words.length; i++) {\n      const word = words[i];\n      const width = ctx.measureText(`${currentLine} ${word}`).width;\n      if (width < maxWidth) {\n        currentLine += ` ${word}`;\n      } else {\n        lines.push(currentLine);\n        currentLine = word;\n      }\n    }\n    lines.push(currentLine);\n    return lines;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-container\",\n    style: {\n      width: '400px',\n      height: '400px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 1080,\n      height: 1080,\n      className: \"border border-gray-400\",\n      style: {\n        width: '400px',\n        height: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: caption,\n        onChange: handleCaptionChange,\n        className: \"border border-gray-400 p-2 mr-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: callToAction,\n        onChange: handleCallToActionChange,\n        className: \"border border-gray-400 p-2 mr-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-picker\",\n        children: /*#__PURE__*/_jsxDEV(ChromePicker, {\n          color: backgroundColor,\n          onChangeComplete: handleBackgroundColorChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(CanvasEditor, \"F6zCx3h0CAGSwfupFffpNVan+z0=\");\n_c = CanvasEditor;\nexport default CanvasEditor;\nvar _c;\n$RefreshReg$(_c, \"CanvasEditor\");","map":{"version":3,"names":["React","useRef","useState","useEffect","ChromePicker","jsxDEV","_jsxDEV","CanvasEditor","templateData","_s","canvasRef","caption","setCaption","text","callToAction","setCallToAction","cta","backgroundColor","setBackgroundColor","canvas","current","ctx","getContext","scaleFactor","scale","fillStyle","fillRect","width","height","designPattern","Image","onload","drawImage","userImage","src","urls","coffeeimg","image_mask","x","y","maskStroke","addRandomQueryParam","stroke","text_color","font","font_size","textAlign","alignment","lines","getLines","max_characters_per_line","forEach","line","index","fillText","position","ctaFontSize","background_color","textBaseline","ctaX","ctaY","design_pattern","handleCaptionChange","event","target","value","handleCallToActionChange","handleBackgroundColorChange","color","hex","url","randomQueryParam","Math","floor","random","maxWidth","words","split","currentLine","i","length","word","measureText","push","className","style","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onChangeComplete","_c","$RefreshReg$"],"sources":["C:/Users/vaibh/OneDrive/Desktop/college/web devlopment/Zepto Prject/my-ap/src/CanvasEditor.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { ChromePicker } from 'react-color';\r\nimport './styles.css';\r\n\r\nconst CanvasEditor = ({ templateData }) => {\r\n  const canvasRef = useRef(null);\r\n  const [caption, setCaption] = useState(templateData.caption.text);\r\n  const [callToAction, setCallToAction] = useState(templateData.cta.text);\r\n  const [backgroundColor, setBackgroundColor] = useState('#0369A1'); // Default background color\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    // Calculate the scale factor for the canvas\r\n    const scaleFactor = 400 / 1080;\r\n\r\n    // Apply the scale to the canvas\r\n    ctx.scale(scaleFactor, scaleFactor);\r\n\r\n    // Draw background color\r\n    ctx.fillStyle = backgroundColor;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Load design pattern\r\n    const designPattern = new Image();\r\n    designPattern.onload = () => {\r\n      ctx.drawImage(designPattern, 0, 0, canvas.width, canvas.height);\r\n\r\n      // Apply mask\r\n      const userImage = new Image();\r\n      userImage.src = templateData.urls.coffeeimg;\r\n      userImage.onload = () => {\r\n        // Resize user image to fit the mask size\r\n        ctx.drawImage(userImage, templateData.image_mask.x, templateData.image_mask.y, templateData.image_mask.width, templateData.image_mask.height);\r\n\r\n        // Load mask stroke\r\n        const maskStroke = new Image();\r\n        maskStroke.src = addRandomQueryParam(templateData.urls.stroke);\r\n        maskStroke.onload = () => {\r\n          // Draw the mask stroke on top of the mask\r\n          ctx.drawImage(maskStroke, templateData.image_mask.x, templateData.image_mask.y, templateData.image_mask.width, templateData.image_mask.height);\r\n\r\n          // Draw caption\r\n          ctx.fillStyle = templateData.caption.text_color;\r\n          ctx.font = `${templateData.caption.font_size}px Arial`;\r\n          ctx.textAlign = templateData.caption.alignment;\r\n          const lines = getLines(ctx, caption, templateData.caption.max_characters_per_line);\r\n          lines.forEach((line, index) => {\r\n            ctx.fillText(line, templateData.caption.position.x, templateData.caption.position.y + index * (templateData.caption.font_size + 5));\r\n          });\r\n\r\n          // Draw call to action\r\n          const ctaFontSize = templateData.cta.font_size || 30; // Default font size if not provided\r\n          ctx.fillStyle = templateData.cta.text_color;\r\n          ctx.fillRect(templateData.cta.position.x, templateData.cta.position.y, 100, 40);\r\n          ctx.fillStyle = templateData.cta.background_color;\r\n          ctx.textAlign = 'center';\r\n          ctx.textBaseline = 'middle';\r\n          ctx.font = `${ctaFontSize}px Arial`;\r\n          const ctaX = templateData.cta.position.x + 50; // Center of the rectangle\r\n          const ctaY = templateData.cta.position.y + 20; // Middle of the rectangle\r\n          ctx.fillText(callToAction, ctaX, ctaY);\r\n        };\r\n      };\r\n    };\r\n\r\n    designPattern.src = addRandomQueryParam(templateData.urls.design_pattern);\r\n  }, [caption, callToAction, backgroundColor, templateData]);\r\n\r\n  const handleCaptionChange = (event) => {\r\n    setCaption(event.target.value);\r\n  };\r\n\r\n  const handleCallToActionChange = (event) => {\r\n    setCallToAction(event.target.value);\r\n  };\r\n\r\n  const handleBackgroundColorChange = (color) => {\r\n    setBackgroundColor(color.hex);\r\n  };\r\n\r\n  const addRandomQueryParam = (url) => {\r\n    const randomQueryParam = Math.floor(Math.random() * 100000); // Generate a random number\r\n    return `${url}?random=${randomQueryParam}`;\r\n  };\r\n\r\n  const getLines = (ctx, text, maxWidth) => {\r\n    const words = text.split(' ');\r\n    const lines = [];\r\n    let currentLine = words[0];\r\n\r\n    for (let i = 1; i < words.length; i++) {\r\n      const word = words[i];\r\n      const width = ctx.measureText(`${currentLine} ${word}`).width;\r\n      if (width < maxWidth) {\r\n        currentLine += ` ${word}`;\r\n      } else {\r\n        lines.push(currentLine);\r\n        currentLine = word;\r\n      }\r\n    }\r\n    lines.push(currentLine);\r\n    return lines;\r\n  };\r\n\r\n  return (\r\n    <div className=\"canvas-container\" style={{ width: '400px', height: '400px' }}>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={1080}\r\n        height={1080}\r\n        className=\"border border-gray-400\"\r\n        style={{ width: '400px', height: '400px' }}\r\n      />\r\n      <div className=\"mt-4\">\r\n        <input\r\n          type=\"text\"\r\n          value={caption}\r\n          onChange={handleCaptionChange}\r\n          className=\"border border-gray-400 p-2 mr-2\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          value={callToAction}\r\n          onChange={handleCallToActionChange}\r\n          className=\"border border-gray-400 p-2 mr-2\"\r\n        />\r\n        <div className=\"color-picker\">\r\n          <ChromePicker color={backgroundColor} onChangeComplete={handleBackgroundColorChange} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CanvasEditor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}